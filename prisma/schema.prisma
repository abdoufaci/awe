// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  phone                 String?
  country               String?

  customerId String? @unique

  orders       Order[]
  subscription Subscription?

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  endDate   DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentType {
  SUBSCRIPTION
  PAYMENT
}

model Payment {
  id        String      @id @default(uuid())
  paymentId String
  amount    String
  type      PaymentType

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Company {
  id       String @id @default(uuid())
  name     String
  logo     Json
  website  String @default("")
  category String
  address  String
  catalog  Json
  phone    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

enum OrderStatus {
  REQUESTED
  CONFIRMED
  PAIED
  SHIPPING
  DELIVERED
  CANCELED
  REFENDED
  DOCCONFIRMATION
}

model Order {
  id             String      @id @default(uuid())
  status         OrderStatus @default(REQUESTED)
  shippingAdress String
  shippingFee    String?
  products       Product[]
  country        String      @default("France")
  orderId        String      @unique
  bankDocument   Json?

  orderHistory OrderHistory[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderHistory {
  id     String      @id @default(uuid())
  status OrderStatus

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id       String  @id @default(uuid())
  name     String
  price    String?
  quantity String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
